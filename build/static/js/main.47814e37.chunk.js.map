{"version":3,"sources":["components/Note.js","services/Notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gLAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCN1CK,EAAU,cAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCJ9BK,EATM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EAAyB,KAEzB,qBAAKd,UAAY,QAAjB,SACKc,KC2DEC,EA5DH,WACV,MAA4BC,mBAAS,IAArC,mBAAQC,EAAR,KAAeC,EAAf,KACA,EAAgCF,mBAAS,iBAAzC,mBAAQG,EAAR,KAAiBC,EAAjB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAQK,EAAR,KAAiBC,EAAjB,KACA,EAAwCN,mBAAS,IAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,IAAqBpB,MAAK,SAAAqB,GAAY,OAAIT,EAASS,QAClD,IACHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,UAGpC,IA0BMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAApC,GAAI,OAAuB,IAAnBA,EAAKG,aAEhE,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASS,IACvB,8BACE,yBAAQrB,QAAS,kBAAMoB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGU,EAAYE,KAAI,SAAArC,GAAI,OAAI,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBAtCtD,SAACc,GAC1B,IAAMf,EAAOqB,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOA,KAChCyB,EAAW,2BAAQxC,GAAR,IAAcG,WAAYH,EAAKG,YAChD2B,EAAmBf,EAAIyB,GAAa9B,MAAK,SAAA+B,GAAY,OAAInB,EAASD,EAAMgB,KAAI,SAAArC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAOyC,SAC3GC,OAAM,SAAAC,GAAK,OAAIf,EAAgB,QAAD,OAAS5B,EAAKK,QAAd,wCAkCsDuC,CAAmB5C,EAAKe,MAArEf,EAAKe,SAE3C,uBAAM8B,SAjCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB3C,QAASkB,EACT0B,MAAM,IAAIC,MAAOC,cACjBhD,UAAWiD,KAAKC,SAAW,IAG7BvB,EAAmBkB,GAAYtC,MAAK,SAAA+B,GAClCnB,EAASD,EAAMiC,OAAOb,IACtBjB,EAAW,QAuBX,UACE,uBAAO+B,MAAOhC,EAAUiC,SApBL,SAACV,GACxBd,QAAQC,IAAIa,EAAMW,OAAOF,OACzB/B,EAAWsB,EAAMW,OAAOF,UAmBpB,wBAAQG,KAAK,SAAb,yB,MCrDRC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.47814e37.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important'\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes/'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null) return null\n    return (\n        <div className = 'error'>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/Notes'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ notes, setNotes ] = useState([])\n  const [ newNote, setNewNote ] = useState('a new note...')\n  const [ showAll, setShowAll ] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('')\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => setNotes(initialNotes))\n  }, [])\n  console.log('render', notes.length, ' notes')\n\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n    noteService.update(id, changedNote).then(returnedNote => setNotes(notes.map(note => note.id !== id ? note : returnedNote)))\n    .catch(error => setErrorMessage(`Note ${note.content} was already removed from server`))\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />)}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote}  onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n\n\n\n"],"sourceRoot":""}